Given a reference to the head of a doubly-linked list and an integer, , create a new DoublyLinkedListNode object having data value  and insert it at the proper location to maintain the sort.

Example

 refers to the list 

Return a reference to the new list: .


#!/bin/python3

import math
import os
import random
import re
import sys

class DoublyLinkedListNode:
    def __init__(self, node_data):
        self.data = node_data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert_node(self, node_data):
        node = DoublyLinkedListNode(node_data)

        if not self.head:
            self.head = node
        else:
            self.tail.next = node
            node.prev = self.tail


        self.tail = node

def print_doubly_linked_list(node, sep, fptr):
    while node:
        fptr.write(str(node.data))

        node = node.next

        if node:
            fptr.write(sep)

#
# Complete the 'sortedInsert' function below.
#
# The function is expected to return an INTEGER_DOUBLY_LINKED_LIST.
# The function accepts following parameters:
#  1. INTEGER_DOUBLY_LINKED_LIST llist
#  2. INTEGER data
#

#
# For your reference:
#
# DoublyLinkedListNode:
#     int data
#     DoublyLinkedListNode next
#     DoublyLinkedListNode prev
#
#

def sortedInsert(llist, data):
        temp=llist
    
        if (temp == None):
           node = DoublyLinkedListNode(data)
 
           node.prev=node.next=None
           return node
        elif (data<temp.data):
            node = DoublyLinkedListNode(data)
        
            node.prev=None
            node.next=temp
            temp.prev=node
            
            return node
        else:
            while( 1 ):
                print("hi")
                
                if data==temp.data:
                    break
                
                if data>temp.data:
                    
                    print("data",data,"temp.data",temp.data)
                    
                    if temp.next != None:
                        
                        temp=temp.next
                    else :
                        print("hii")
                        node=DoublyLinkedListNode(data)
                       
                        node.next=None
                        node.prev=temp
                        temp.next=node
                        
                        return llist
                        
                        
                        
                        
                elif data<temp.data:
                    break
                    
            node=DoublyLinkedListNode(data)
            
            node.next=temp
            node.prev=temp.prev
            
            temp1=node.prev
            temp1.next=node
        return    llist
    
    # node=DoublyLinkedListNode() 
    # if temp.prev ==None :
    #     node.data=data
        
        
    
    
    # Write your code here

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        llist_count = int(input())

        llist = DoublyLinkedList()

        for _ in range(llist_count):
            llist_item = int(input())
            llist.insert_node(llist_item)

        data = int(input())

        llist1 = sortedInsert(llist.head, data)

        print_doubly_linked_list(llist1, ' ', fptr)
        fptr.write('\n')

    fptr.close()
